package com.dominions.modmerger.domain

import com.dominions.modmerger.infrastructure.GamePathsManager
import java.io.File

/**
 * Configuration for mod output generation.
 * Represents all necessary information for creating a properly structured mod.
 *
 * @property modName Name of the output mod (must follow Dominions 6 naming conventions)
 * @property directory Base directory where the mod will be created (defaults to local mods directory)
 * @property description Optional description of the merged mod
 * @property version Version of the merged mod (defaults to "1.0")
 * @property icon Optional path to the mod's icon file (must be .tga format)
 * @property sourceMods List of original mod names that were merged
 */
data class ModOutputConfig(
    val modName: String,
    val directory: File,
    val description: String = "Merged mod containing multiple mods",
    val version: String = "1.0",
    val icon: File? = null,
    val sourceMods: List<String> = emptyList()
) {
    companion object {
        private const val DEFAULT_VERSION = "1.0"
    }

    /**
     * Creates default configuration using the local mods directory.
     */
    constructor(modName: String, gamePathsManager: GamePathsManager) : this(
        modName = modName,
        directory = gamePathsManager.getLocalModPath()
    )

    /**
     * Validates if the configuration is valid according to Dominions 6 requirements.
     * @return Pair<Boolean, List<String>> where first is validity and second is list of error messages (if any)
     */
    fun validate(): Pair<Boolean, List<String>> {
        val errors = mutableListOf<String>()

        // Validate mod name
        if (!isValidModName(modName)) {
            errors.add("Invalid mod name: must contain only letters, numbers, underscores, or hyphens")
        }

        // Validate directory
        if (!directory.exists() && !directory.canWrite()) {
            errors.add("Invalid directory: ${directory.absolutePath} is not writable")
        }

        // Validate icon if present
        icon?.let {
            if (!it.exists() || it.extension.lowercase() != "tga") {
                errors.add("Invalid icon: must be a .tga file")
            }
        }

        // Validate version format
        if (!isValidVersion(version)) {
            errors.add("Invalid version format: should be in format X.YY")
        }

        return errors.isEmpty() to errors
    }

    /**
     * Generates a description including the source mods if available.
     */
    fun generateDescription(): String {
        return buildString {
            appendLine(description)
            if (sourceMods.isNotEmpty()) {
                appendLine("\nMerged from the following mods:")
                sourceMods.forEach { appendLine("- $it") }
            }
            appendLine("\nGenerated by Dominions 6 Mod Merger")
        }
    }

    private fun isValidModName(name: String): Boolean {
        return name.matches(Regex("^[a-zA-Z0-9_-]+$"))
    }

    private fun isValidVersion(version: String): Boolean {
        return version.matches(Regex("^\\d+\\.\\d+$"))
    }

    /**
     * Creates a builder to help construct ModOutputConfig instances.
     */
    class Builder(private val modName: String, private val gamePathsManager: GamePathsManager) {
        private var directory: File = gamePathsManager.getLocalModPath()
        private var description: String = "Merged mod containing multiple mods"
        private var version: String = DEFAULT_VERSION
        private var icon: File? = null
        private var sourceMods: List<String> = emptyList()

        fun setDirectory(dir: File) = apply { this.directory = dir }
        fun setDescription(desc: String) = apply { this.description = desc }
        fun setVersion(ver: String) = apply { this.version = ver }
        fun setIcon(iconFile: File) = apply { this.icon = iconFile }
        fun setSourceMods(mods: List<String>) = apply { this.sourceMods = mods }

        fun build() = ModOutputConfig(
            modName = modName,
            directory = directory,
            description = description,
            version = version,
            icon = icon,
            sourceMods = sourceMods
        )
    }
}