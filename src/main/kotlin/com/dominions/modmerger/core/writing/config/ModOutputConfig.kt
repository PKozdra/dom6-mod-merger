package com.dominions.modmerger.core.writing.config

import com.dominions.modmerger.infrastructure.GamePathsManager
import java.io.File

/**
 * Configuration for mod output generation.
 * Represents all necessary information for creating a properly structured mod.
 *
 * @property modName Technical name used for files/folders (must follow file naming conventions)
 * @property displayName Name shown in-game (allows spaces and special characters)
 * @property directory Base directory where the mod will be created
 * @property description Optional description of the merged mod
 * @property version Version of the merged mod (defaults to "1.0")
 * @property icon Optional path to the mod's icon file (must be .tga format)
 * @property sourceMods List of original mod names that were merged
 */
data class ModOutputConfig(
    val modName: String,
    val displayName: String,
    val directory: File,
    val description: String = "",
    val version: String = DEFAULT_VERSION,
    val icon: File? = null,
    val sourceMods: List<String> = emptyList(),
    val gamePathsManager: GamePathsManager
) {
    companion object {
        private const val DEFAULT_VERSION = "1.0"
        private val VALID_MOD_NAME_REGEX = Regex("^[a-zA-Z0-9_-]+$")
        private val VALID_VERSION_REGEX = Regex("^\\d+\\.\\d+$")
    }

    /**
     * Creates default configuration using the local mods directory.
     */
    constructor(modName: String, gamePathsManager: GamePathsManager) : this(
        modName = modName,
        displayName = modName.replace('_', ' '),
        directory = gamePathsManager.getLocalModPath(),
        gamePathsManager = gamePathsManager
    )

    /**
     * Validates if the configuration is valid according to Dominions 6 requirements.
     * @return Pair<Boolean, List<String>> where first is validity and second is list of error messages
     */
    fun validate(): Pair<Boolean, List<String>> {
        val errors = mutableListOf<String>()

        validateModName(errors)
        validateDisplayName(errors)
        validateDirectory(errors)
        validateIcon(errors)
        validateVersion(errors)

        return errors.isEmpty() to errors
    }

    private fun validateModName(errors: MutableList<String>) {
        if (!modName.matches(VALID_MOD_NAME_REGEX)) {
            errors.add("Technical mod name must contain only letters, numbers, underscores, or hyphens")
        }
    }

    private fun validateDisplayName(errors: MutableList<String>) {
        if (displayName.isBlank()) {
            errors.add("Display name cannot be empty")
        }
    }

    private fun validateDirectory(errors: MutableList<String>) {
        if (!directory.exists() && !directory.canWrite()) {
            errors.add("Directory '${directory.absolutePath}' is not writable")
        }
    }

    private fun validateIcon(errors: MutableList<String>) {
        icon?.let {
            if (!it.exists() || it.extension.lowercase() != "tga") {
                errors.add("Icon must be a valid .tga file")
            }
        }
    }

    private fun validateVersion(errors: MutableList<String>) {
        if (!version.matches(VALID_VERSION_REGEX)) {
            errors.add("Version must be in format X.YY")
        }
    }

    /**
     * Generates a complete description including source mods information.
     */
    fun generateDescription(): String = buildString {
        appendLine(description)
        if (sourceMods.isNotEmpty()) {
            appendLine("\nMerged from the following mods:")
            sourceMods.forEach { appendLine("- $it") }
        }
        appendLine("\nGenerated by Dominions 6 Mod Merger")
    }

    /**
     * Builder for creating ModOutputConfig instances with a fluent interface.
     */
    class Builder(
        private val modName: String,
        private val gamePathsManager: GamePathsManager
    ) {
        private var displayName: String = modName.replace('_', ' ')
        private var directory: File = gamePathsManager.getLocalModPath()
        private var description: String = "Merged mod containing multiple mods"
        private var version: String = DEFAULT_VERSION
        private var icon: File? = null
        private var sourceMods: List<String> = emptyList()

        fun setDisplayName(name: String) = apply { this.displayName = name }
        fun setDirectory(dir: File) = apply { this.directory = dir }
        fun setDescription(desc: String) = apply { this.description = desc }
        fun setVersion(ver: String) = apply { this.version = ver }
        fun setIcon(iconFile: File) = apply { this.icon = iconFile }
        fun setSourceMods(mods: List<String>) = apply { this.sourceMods = mods }

        fun build() = ModOutputConfig(
            modName = modName,
            displayName = displayName,
            directory = directory,
            description = description,
            version = version,
            icon = icon,
            sourceMods = sourceMods,
            gamePathsManager = gamePathsManager
        )

        /**
         * Creates a technical name from a display name
         */
        fun sanitizeToModName(displayName: String): String =
            displayName
                .replace(" ", "_")
                .replace(Regex("[^a-zA-Z0-9_-]"), "")
    }
}